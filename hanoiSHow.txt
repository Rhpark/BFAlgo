/*
#include<iostream>
#include<string>

using namespace std;

class Hs
{
int map[5][3];
public:
Hs()
{
for(int i = 0 ; i < 5 ; i++)
for(int j = 0 ; j < 3 ; j ++)
map[i][j] = 0;
map[0][0] = 5;
map[1][0] = 4;
map[2][0] = 3;
map[3][0] = 2;
map[4][0] = 1;
}

void ChangeHanoi(char from,char to)
{
int _from;
int _to;
int fromtop;
int totop = -1;

if(from == 'A'){_from = 0;}
else if(from == 'B'){_from = 1;}
else{_from = 2;}

if(to == 'A'){_to = 0;}
else if(to == 'B'){_to = 1;}
else{_to = 2;}

for(int i = 0 ; i < 5 ; i ++)
{	
if(map[i][_from] != 0)
{
fromtop = i;
}
if(map[i][_to] != 0)
{
totop = i;
}
}
if(totop !=-1)
{
map[totop+1][_to]= map[fromtop][_from];
map[fromtop][_from] = 0;
}
else
{
map[0][_to]= map[fromtop][_from];
map[fromtop][_from] = 0;
}

}
void HanoiMove(int n,char from,char to,char tmp)
{
if(n == 1) {
cout<<from<<" ===> "<<to<<endl;

ChangeHanoi(from,to);

print();
return;
}
HanoiMove(n-1,from,tmp,to);
HanoiMove(1,from,to,tmp);
HanoiMove(n-1,tmp,to,from);
}
void print()
{
for(int i = 4 ; i >= 0 ; i --)
{
for(int j =0 ; j < 3 ; j ++)
{	
if(map[i][j] == 0)
{
cout<<"             ";
}
else if(map[i][j] == 1)
{		 
cout<<"      *      ";	
}
else if(map[i][j] == 2)
{
cout<<"     * *     ";
}
else if(map[i][j] == 3)
{
cout<<"    * * *    ";					
}
else if(map[i][j] == 4)
{
cout<<"   * * * *   ";
}
else if(map[i][j] == 5)
{			
cout<<"  * * * * *  ";
}

}cout<<endl;
}
cout<<"============= ============ "
"============="<<endl;
cout<<"       A             B             C"<<endl<<endl;
}
};
int main()
{
Hs s;
s.HanoiMove(5,'A','C','B');
return 0;
}
*/
#include <iostream>
#include <stdio.h>
#include <conio.h>

using namespace std;

#define pause getch()

#define is_stack_empty()  (top < 0)
#define MAX 100
class Hanoi
{
	int top; // 스택의 상단 
	int stack[MAX];  // 배열 사용
	int map[5][3];

public:

	Hanoi()
	{
		for(int i = 0 ; i < 5 ; i++)
			for(int j = 0 ; j < 3 ; j ++)
				map[i][j] = 0;
		map[0][0] = 5;
		map[1][0] = 4;
		map[2][0] = 3;
		map[3][0] = 2;
		map[4][0] = 1;
	}
	void init_stack() 
	{
		top = -1;  // 스택이 비워짐
	}

	int push(int val)
	{
		if(top >= MAX -1)  // 스택이 꽉 참
		{
			cout<<"\nOverflow.";
			return -1;
		}
		stack[++top] = val;
		return val;
	}

	int pop()
	{
		if(top < 0)  // 스택이 빔
		{
			printf("\nUnderflow.");
			return -1;
		}
		return stack[top--];
	}

	void move(int a, int c, int n)
	{
		printf("%d을 %c에서 %c로 옮깁니다\n",n,'A'-1+a,'A'-1+c);
		ChangeHanoi('A'-1+a,'A'-1+c);
		print();
	}
	void print()
	{
		for(int i = 4 ; i >= 0 ; i --)
		{
			for(int j =0 ; j < 3 ; j ++)
			{	
				if(map[i][j] == 0)
					cout<<"             ";
				else if(map[i][j] == 1)	 
					cout<<"      *      ";	
				else if(map[i][j] == 2)
					cout<<"     * *     ";
				else if(map[i][j] == 3)
					cout<<"    * * *    ";					
				else if(map[i][j] == 4)
					cout<<"   * * * *   ";
				else if(map[i][j] == 5)		
					cout<<"  * * * * *  ";
			}cout<<endl;
		}
		cout<<"============= ============ "
			"============="<<endl;
		cout<<"       A             B             C"<<endl<<endl;
	}
	void ChangeHanoi(char from,char to)
	{
		int _from;
		int _to;
		int fromtop;
		int totop = -1;

		if(from == 'A'){_from = 0;}
		else if(from == 'B'){_from = 1;}
		else{_from = 2;}

		if(to == 'A'){_to = 0;}
		else if(to == 'B'){_to = 1;}
		else{_to = 2;}

		for(int i = 0 ; i < 5 ; i ++)
		{	
			if(map[i][_from] != 0)
			{
				fromtop = i;
			}
			if(map[i][_to] != 0)
			{
				totop = i;
			}
		}
		if(totop !=-1)
		{
			map[totop+1][_to]= map[fromtop][_from];
			map[fromtop][_from] = 0;
		}
		else
		{
			map[0][_to]= map[fromtop][_from];
			map[fromtop][_from] = 0;
		}
	}
	void nr_hanoi(int n, int a, int b, int c)
	{
		int done = 0; 
		init_stack();   // 스택초기화 top = -1
		while(!done)
		{
			while(n > 1)
			{
				push(c);  // 인자 삽입
				push(b);
				push(a);
				push(n);
				n--;  
				push(c);  // c와 b의 교환을 위해 임시로 저장
				c = b;
				b = pop();
			}

			move(a, c, n);  // 종료 처리
			if(!is_stack_empty()) // (top < 0) -> !(top < 0) 
			{
				n = pop();  
				a = pop();
				b = pop();
				c = pop();
				move(a, c, n);  
				n--;  
				push(a);  // a와 b의 교환을 위해 임시로 저장 
				a = b;
				b = pop();
			}
			else
				done = 1;  // 스택이 비면 끝
		}
	}
};
int main()
{
	Hanoi h;
	h.nr_hanoi(5, 1, 2, 3);
	printf("\n(종료 : 0)  ");

	return 0;
}
