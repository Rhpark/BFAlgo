#include<iostream>
#include<stack>

#define MAX 6	//미로 길이
#define START 2	//입구 번호
#define END 3	//출구 번호

using namespace std;

int map[MAX][MAX] = {	{2,1,1,0,1,0},
						{0,0,1,1,1,0},
						{1,0,0,0,0,0},
						{0,0,1,0,1,0},
						{1,1,1,0,0,0},
						{1,0,0,0,1,3}};
class Algo
{
	stack<int>stX,stY;	//미로 길 좌표 넣기
	bool End;			//미로가 끝낫는지 확인하기
	int startX,startY;	//그냥 확인용.
public:
	void FindStart()	//시작위치 찾아보기.
	{
		End = false;	//끝이 아님;
		for(int i = 0 ; i < MAX ; i ++)
		{
			for(int j = 0 ; j < MAX  ; j ++)
			{
				if(map[i][j] == START)
				{
					startX = j;
					startY = i;
					stX.push(j);
					stY.push(i);
					map[i][j] = 1;
					cout<<startX<<startY<<endl;
					break;
				}
			}
		}
	}
	void Run()		//길찾기 시작하는 함수
	{
		bool end = false;	//길인지 아닌지 판변 변수.
		while(End != true)
		{			
			if(stY.top() < MAX-1)
			{
				cout<<"밑"<<endl;
				end = Move(1,0);	
				if(end == true)
					continue;
			}
			if(stX.top() < MAX-1)
			{
				cout<<"오른"<<endl;
				end = Move(0,1);
				if(end == true)
					continue;
			}
			if(stY.top() > 0)
			{
				cout<<"위"<<endl;
				end = Move(-1,0);
				if(end == true)
					continue;
			}
			if(stX.top() > 0)
			{
				cout<<"왼"<<endl;
				end = Move(0,-1);
				if(end == true)
					continue;
			}		
			if(!stX.empty())
			{
				stX.pop();
				stY.pop();
			}
			if(stX.size() ==1)
			{
				cout<<"길이 없습니다."<<endl;
				End = true;
				return ;
			}
		}
	}
	bool Move(int y,int x)	//실제 움직일수 있는지 검사후 확인.
	{
		if(map[stY.top()+y][stX.top()+x] != 1)
		{
			if(map[stY.top()+y][stX.top()+x] == 3)
			{
				cout<<"길 찾았다"<<endl;	
				End = true;
			}
			cout<<"길이다"<<endl;
			stY.push(stY.top()+y);
			stX.push(stX.top()+x);
			map[stY.top()][stX.top()] = 1;
			return true;
		}
		else
			cout<<"막힘"<<endl;
		return false;
	}
	void Print()	//좌표 뽑음.
	{
		while(true)
		{
			if(!stY.empty())
			{
			cout<<"좌표 : ( "<<stY.top()<<" , "<<stX.top()<<" )"<<endl;
			stY.pop();
			stX.pop();
			}
			else
				break;
		}
	}
};

int main()
{
	Algo a;
	a.FindStart();
	a.Run();
	a.Print();
	return 0;
}